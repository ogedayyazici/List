(define lst '())

(define (append-list proc n)
  (let loop ((n n))
    (unless (zero? n)
      (define val(proc))
      (begin (set! lst (append lst (list val)))   
      (loop (- n 1))))
    )
)

(define (remove x ls)
    (let loop((ls0 ls) (ls1 ()))
        (if (null? ls0) 
	        (reverse ls1)
	        (loop
	          (cdr ls0)
                (if (eqv? x (car ls0))
                    ls1
                (cons (car ls0) ls1))
            )
        )
    )
)

(display "Define the length of the list:")
(define val(read))
(display "Add elements to the list:")
(newline)
(append-list read val)
(print lst)
(display "Choose the list element to be removed:")
(define val(read))
(print (remove val lst))