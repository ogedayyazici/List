(define lst '())

(define (append-list proc n)
  (let loop ((n n))
    (unless (zero? n)
      (define val(proc))
      (begin (set! lst (append lst (list val)))   
      (loop (- n 1))))
    )
)

(define (delete-n l n)
  (if (= n 0) 
      (cdr l)
      (append (list (car l)) (delete-n (cdr l) (- n 1))))      
)

(define (delete-loop l val)
  (let loop ((val val))
    (unless (zero? val)
      (print (delete-n l val))
      (loop (+ val val)))
    )
)
(display "Define the length of the list:")
(define val(read))
(display "Add elements to the list:")
(newline)
(append-list read val)
(print lst)
(display "Choose the list element to be removed:")
(define val2(read))
(delete-loop lst val2)

